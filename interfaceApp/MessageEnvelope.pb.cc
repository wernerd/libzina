// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageEnvelope.proto

#include "MessageEnvelope.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_MessageEnvelope_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_MessageEnvelope_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RatchetData;
}  // namespace protobuf_MessageEnvelope_2eproto
namespace zina {
class MessageEnvelopeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MessageEnvelope>
      _instance;
} _MessageEnvelope_default_instance_;
class RatchetDataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RatchetData>
      _instance;
} _RatchetData_default_instance_;
}  // namespace zina
namespace protobuf_MessageEnvelope_2eproto {
static void InitDefaultsMessageEnvelope() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_MessageEnvelope_default_instance_;
    new (ptr) ::zina::MessageEnvelope();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::MessageEnvelope::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MessageEnvelope =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMessageEnvelope}, {
      &protobuf_MessageEnvelope_2eproto::scc_info_RatchetData.base,}};

static void InitDefaultsRatchetData() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_RatchetData_default_instance_;
    new (ptr) ::zina::RatchetData();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::RatchetData::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RatchetData =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRatchetData}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MessageEnvelope.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RatchetData.base);
}

}  // namespace protobuf_MessageEnvelope_2eproto
namespace zina {

// ===================================================================

void MessageEnvelope::InitAsDefaultInstance() {
  ::zina::_MessageEnvelope_default_instance_._instance.get_mutable()->ratchet_ = const_cast< ::zina::RatchetData*>(
      ::zina::RatchetData::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageEnvelope::kNameFieldNumber;
const int MessageEnvelope::kScClientDevIdFieldNumber;
const int MessageEnvelope::kMsgTypeFieldNumber;
const int MessageEnvelope::kSupplementFieldNumber;
const int MessageEnvelope::kMessageFieldNumber;
const int MessageEnvelope::kMsgIdFieldNumber;
const int MessageEnvelope::kRecvIdHashFieldNumber;
const int MessageEnvelope::kSenderIdHashFieldNumber;
const int MessageEnvelope::kRecvDevIdBinFieldNumber;
const int MessageEnvelope::kRatchetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageEnvelope::MessageEnvelope()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MessageEnvelope_2eproto::scc_info_MessageEnvelope.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.MessageEnvelope)
}
MessageEnvelope::MessageEnvelope(const MessageEnvelope& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  scclientdevid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scclientdevid()) {
    scclientdevid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scclientdevid_);
  }
  supplement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_supplement()) {
    supplement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supplement_);
  }
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_message()) {
    message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
  }
  msgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msgid()) {
    msgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgid_);
  }
  recvidhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recvidhash()) {
    recvidhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recvidhash_);
  }
  senderidhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_senderidhash()) {
    senderidhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderidhash_);
  }
  recvdevidbin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_recvdevidbin()) {
    recvdevidbin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recvdevidbin_);
  }
  if (from.has_ratchet()) {
    ratchet_ = new ::zina::RatchetData(*from.ratchet_);
  } else {
    ratchet_ = NULL;
  }
  msgtype_ = from.msgtype_;
  // @@protoc_insertion_point(copy_constructor:zina.MessageEnvelope)
}

void MessageEnvelope::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scclientdevid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supplement_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvidhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderidhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvdevidbin_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ratchet_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgtype_) -
      reinterpret_cast<char*>(&ratchet_)) + sizeof(msgtype_));
}

MessageEnvelope::~MessageEnvelope() {
  // @@protoc_insertion_point(destructor:zina.MessageEnvelope)
  SharedDtor();
}

void MessageEnvelope::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  scclientdevid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  supplement_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msgid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvidhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  senderidhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recvdevidbin_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ratchet_;
}

void MessageEnvelope::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageEnvelope& MessageEnvelope::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MessageEnvelope_2eproto::scc_info_MessageEnvelope.base);
  return *internal_default_instance();
}


void MessageEnvelope::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.MessageEnvelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      scclientdevid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      supplement_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      message_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      msgid_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000020u) {
      recvidhash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000040u) {
      senderidhash_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000080u) {
      recvdevidbin_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    GOOGLE_DCHECK(ratchet_ != NULL);
    ratchet_->Clear();
  }
  msgtype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MessageEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.MessageEnvelope)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scClientDevId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scclientdevid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 msgType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_msgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes supplement = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_supplement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes message = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msgId = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes recvIdHash = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recvidhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes senderIdHash = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_senderidhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes recvDevIdBin = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recvdevidbin()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.RatchetData ratchet = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ratchet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.MessageEnvelope)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.MessageEnvelope)
  return false;
#undef DO_
}

void MessageEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.MessageEnvelope)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string scClientDevId = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scclientdevid(), output);
  }

  // optional uint32 msgType = 3;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->msgtype(), output);
  }

  // optional bytes supplement = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->supplement(), output);
  }

  // optional bytes message = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->message(), output);
  }

  // optional string msgId = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->msgid(), output);
  }

  // optional bytes recvIdHash = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->recvidhash(), output);
  }

  // optional bytes senderIdHash = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->senderidhash(), output);
  }

  // optional bytes recvDevIdBin = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->recvdevidbin(), output);
  }

  // optional .zina.RatchetData ratchet = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->_internal_ratchet(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.MessageEnvelope)
}

size_t MessageEnvelope::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.MessageEnvelope)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string scClientDevId = 2;
    if (has_scclientdevid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scclientdevid());
    }

    // optional bytes supplement = 4;
    if (has_supplement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->supplement());
    }

    // optional bytes message = 5;
    if (has_message()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->message());
    }

    // optional string msgId = 6;
    if (has_msgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msgid());
    }

    // optional bytes recvIdHash = 7;
    if (has_recvidhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->recvidhash());
    }

    // optional bytes senderIdHash = 8;
    if (has_senderidhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->senderidhash());
    }

    // optional bytes recvDevIdBin = 10;
    if (has_recvdevidbin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->recvdevidbin());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional .zina.RatchetData ratchet = 12;
    if (has_ratchet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ratchet_);
    }

    // optional uint32 msgType = 3;
    if (has_msgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->msgtype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageEnvelope::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MessageEnvelope*>(&from));
}

void MessageEnvelope::MergeFrom(const MessageEnvelope& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.MessageEnvelope)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_scclientdevid();
      scclientdevid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scclientdevid_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_supplement();
      supplement_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.supplement_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_message();
      message_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_msgid();
      msgid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msgid_);
    }
    if (cached_has_bits & 0x00000020u) {
      set_has_recvidhash();
      recvidhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recvidhash_);
    }
    if (cached_has_bits & 0x00000040u) {
      set_has_senderidhash();
      senderidhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.senderidhash_);
    }
    if (cached_has_bits & 0x00000080u) {
      set_has_recvdevidbin();
      recvdevidbin_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.recvdevidbin_);
    }
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      mutable_ratchet()->::zina::RatchetData::MergeFrom(from.ratchet());
    }
    if (cached_has_bits & 0x00000200u) {
      msgtype_ = from.msgtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MessageEnvelope::CopyFrom(const MessageEnvelope& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.MessageEnvelope)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageEnvelope::IsInitialized() const {
  return true;
}

void MessageEnvelope::Swap(MessageEnvelope* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageEnvelope::InternalSwap(MessageEnvelope* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  scclientdevid_.Swap(&other->scclientdevid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  supplement_.Swap(&other->supplement_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_.Swap(&other->message_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  msgid_.Swap(&other->msgid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recvidhash_.Swap(&other->recvidhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  senderidhash_.Swap(&other->senderidhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  recvdevidbin_.Swap(&other->recvdevidbin_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ratchet_, other->ratchet_);
  swap(msgtype_, other->msgtype_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string MessageEnvelope::GetTypeName() const {
  return "zina.MessageEnvelope";
}


// ===================================================================

void RatchetData::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RatchetData::kUseVersionFieldNumber;
const int RatchetData::kMaxVersionFieldNumber;
const int RatchetData::kContextIdFieldNumber;
const int RatchetData::kCurveTypeFieldNumber;
const int RatchetData::kFlagsFieldNumber;
const int RatchetData::kRatchetMsgTypeFieldNumber;
const int RatchetData::kNpFieldNumber;
const int RatchetData::kPNpFieldNumber;
const int RatchetData::kRatchetFieldNumber;
const int RatchetData::kMacFieldNumber;
const int RatchetData::kLocalPreKeyIdFieldNumber;
const int RatchetData::kRemotePreKeyFieldNumber;
const int RatchetData::kRemoteIdKeyFieldNumber;
const int RatchetData::kPreKeyHashFieldNumber;
const int RatchetData::kContextId2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RatchetData::RatchetData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_MessageEnvelope_2eproto::scc_info_RatchetData.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.RatchetData)
}
RatchetData::RatchetData(const RatchetData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ratchet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ratchet()) {
    ratchet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ratchet_);
  }
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_mac()) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  remoteprekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_remoteprekey()) {
    remoteprekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remoteprekey_);
  }
  remoteidkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_remoteidkey()) {
    remoteidkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remoteidkey_);
  }
  prekeyhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_prekeyhash()) {
    prekeyhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prekeyhash_);
  }
  ::memcpy(&useversion_, &from.useversion_,
    static_cast<size_t>(reinterpret_cast<char*>(&contextid2_) -
    reinterpret_cast<char*>(&useversion_)) + sizeof(contextid2_));
  // @@protoc_insertion_point(copy_constructor:zina.RatchetData)
}

void RatchetData::SharedCtor() {
  ratchet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remoteprekey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remoteidkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prekeyhash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&useversion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&contextid2_) -
      reinterpret_cast<char*>(&useversion_)) + sizeof(contextid2_));
}

RatchetData::~RatchetData() {
  // @@protoc_insertion_point(destructor:zina.RatchetData)
  SharedDtor();
}

void RatchetData::SharedDtor() {
  ratchet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remoteprekey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remoteidkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  prekeyhash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RatchetData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RatchetData& RatchetData::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_MessageEnvelope_2eproto::scc_info_RatchetData.base);
  return *internal_default_instance();
}


void RatchetData::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.RatchetData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      ratchet_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      mac_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      remoteprekey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      remoteidkey_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      prekeyhash_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 224u) {
    ::memset(&useversion_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contextid_) -
        reinterpret_cast<char*>(&useversion_)) + sizeof(contextid_));
  }
  if (cached_has_bits & 32512u) {
    ::memset(&curvetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&contextid2_) -
        reinterpret_cast<char*>(&curvetype_)) + sizeof(contextid2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RatchetData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.RatchetData)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 useVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_useversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &useversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 maxVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_maxversion();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxversion_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 contextId = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_contextid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contextid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 curveType = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_curvetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curvetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flags = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ratchetMsgType = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_ratchetmsgtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ratchetmsgtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Np = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_np();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &np_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 PNp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_pnp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pnp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes ratchet = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ratchet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes mac = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_mac()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 localPreKeyId = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {
          set_has_localprekeyid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &localprekeyid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes remotePreKey = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remoteprekey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes remoteIdKey = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_remoteidkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes preKeyHash = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_prekeyhash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 contextId2 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u /* 120 & 0xFF */)) {
          set_has_contextid2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contextid2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.RatchetData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.RatchetData)
  return false;
#undef DO_
}

void RatchetData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.RatchetData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 useVersion = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->useversion(), output);
  }

  // optional int32 maxVersion = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxversion(), output);
  }

  // optional uint32 contextId = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contextid(), output);
  }

  // optional int32 curveType = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curvetype(), output);
  }

  // optional uint32 flags = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->flags(), output);
  }

  // optional int32 ratchetMsgType = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ratchetmsgtype(), output);
  }

  // optional int32 Np = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->np(), output);
  }

  // optional int32 PNp = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pnp(), output);
  }

  // optional bytes ratchet = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->ratchet(), output);
  }

  // optional bytes mac = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      10, this->mac(), output);
  }

  // optional int32 localPreKeyId = 11;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->localprekeyid(), output);
  }

  // optional bytes remotePreKey = 12;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->remoteprekey(), output);
  }

  // optional bytes remoteIdKey = 13;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      13, this->remoteidkey(), output);
  }

  // optional bytes preKeyHash = 14;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      14, this->prekeyhash(), output);
  }

  // optional uint32 contextId2 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->contextid2(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.RatchetData)
}

size_t RatchetData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.RatchetData)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes ratchet = 9;
    if (has_ratchet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ratchet());
    }

    // optional bytes mac = 10;
    if (has_mac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->mac());
    }

    // optional bytes remotePreKey = 12;
    if (has_remoteprekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->remoteprekey());
    }

    // optional bytes remoteIdKey = 13;
    if (has_remoteidkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->remoteidkey());
    }

    // optional bytes preKeyHash = 14;
    if (has_prekeyhash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->prekeyhash());
    }

    // optional int32 useVersion = 1;
    if (has_useversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->useversion());
    }

    // optional int32 maxVersion = 2;
    if (has_maxversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxversion());
    }

    // optional uint32 contextId = 3;
    if (has_contextid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contextid());
    }

  }
  if (_has_bits_[8 / 32] & 32512u) {
    // optional int32 curveType = 4;
    if (has_curvetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curvetype());
    }

    // optional uint32 flags = 5;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flags());
    }

    // optional int32 ratchetMsgType = 6;
    if (has_ratchetmsgtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ratchetmsgtype());
    }

    // optional int32 Np = 7;
    if (has_np()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->np());
    }

    // optional int32 PNp = 8;
    if (has_pnp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pnp());
    }

    // optional int32 localPreKeyId = 11;
    if (has_localprekeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->localprekeyid());
    }

    // optional uint32 contextId2 = 15;
    if (has_contextid2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contextid2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RatchetData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RatchetData*>(&from));
}

void RatchetData::MergeFrom(const RatchetData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.RatchetData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ratchet();
      ratchet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ratchet_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_mac();
      mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_remoteprekey();
      remoteprekey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remoteprekey_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_remoteidkey();
      remoteidkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remoteidkey_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_prekeyhash();
      prekeyhash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.prekeyhash_);
    }
    if (cached_has_bits & 0x00000020u) {
      useversion_ = from.useversion_;
    }
    if (cached_has_bits & 0x00000040u) {
      maxversion_ = from.maxversion_;
    }
    if (cached_has_bits & 0x00000080u) {
      contextid_ = from.contextid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 32512u) {
    if (cached_has_bits & 0x00000100u) {
      curvetype_ = from.curvetype_;
    }
    if (cached_has_bits & 0x00000200u) {
      flags_ = from.flags_;
    }
    if (cached_has_bits & 0x00000400u) {
      ratchetmsgtype_ = from.ratchetmsgtype_;
    }
    if (cached_has_bits & 0x00000800u) {
      np_ = from.np_;
    }
    if (cached_has_bits & 0x00001000u) {
      pnp_ = from.pnp_;
    }
    if (cached_has_bits & 0x00002000u) {
      localprekeyid_ = from.localprekeyid_;
    }
    if (cached_has_bits & 0x00004000u) {
      contextid2_ = from.contextid2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RatchetData::CopyFrom(const RatchetData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.RatchetData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RatchetData::IsInitialized() const {
  return true;
}

void RatchetData::Swap(RatchetData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RatchetData::InternalSwap(RatchetData* other) {
  using std::swap;
  ratchet_.Swap(&other->ratchet_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  mac_.Swap(&other->mac_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remoteprekey_.Swap(&other->remoteprekey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remoteidkey_.Swap(&other->remoteidkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  prekeyhash_.Swap(&other->prekeyhash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(useversion_, other->useversion_);
  swap(maxversion_, other->maxversion_);
  swap(contextid_, other->contextid_);
  swap(curvetype_, other->curvetype_);
  swap(flags_, other->flags_);
  swap(ratchetmsgtype_, other->ratchetmsgtype_);
  swap(np_, other->np_);
  swap(pnp_, other->pnp_);
  swap(localprekeyid_, other->localprekeyid_);
  swap(contextid2_, other->contextid2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string RatchetData::GetTypeName() const {
  return "zina.RatchetData";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zina
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::MessageEnvelope* Arena::CreateMaybeMessage< ::zina::MessageEnvelope >(Arena* arena) {
  return Arena::CreateInternal< ::zina::MessageEnvelope >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::RatchetData* Arena::CreateMaybeMessage< ::zina::RatchetData >(Arena* arena) {
  return Arena::CreateInternal< ::zina::RatchetData >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
