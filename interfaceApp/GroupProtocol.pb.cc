// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupProtocol.proto

#include "GroupProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_GroupProtocol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GroupProtocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_GroupUpdateAck;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GroupProtocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Member;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GroupProtocol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_VClock;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GroupProtocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GroupBurnMessage;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GroupProtocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateAddMember;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GroupProtocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateRmMember;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GroupProtocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateSetAvatar;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GroupProtocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateSetBurn;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_GroupProtocol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateSetName;
}  // namespace protobuf_GroupProtocol_2eproto
namespace zina {
class VClockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VClock>
      _instance;
} _VClock_default_instance_;
class LocalVClockDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LocalVClock>
      _instance;
} _LocalVClock_default_instance_;
class MemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Member>
      _instance;
} _Member_default_instance_;
class GroupUpdateSetNameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupUpdateSetName>
      _instance;
} _GroupUpdateSetName_default_instance_;
class GroupUpdateSetAvatarDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupUpdateSetAvatar>
      _instance;
} _GroupUpdateSetAvatar_default_instance_;
class GroupUpdateSetBurnDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupUpdateSetBurn>
      _instance;
} _GroupUpdateSetBurn_default_instance_;
class GroupUpdateAddMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupUpdateAddMember>
      _instance;
} _GroupUpdateAddMember_default_instance_;
class GroupUpdateRmMemberDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupUpdateRmMember>
      _instance;
} _GroupUpdateRmMember_default_instance_;
class GroupBurnMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupBurnMessage>
      _instance;
} _GroupBurnMessage_default_instance_;
class GroupUpdateAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupUpdateAck>
      _instance;
} _GroupUpdateAck_default_instance_;
class GroupChangeSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GroupChangeSet>
      _instance;
} _GroupChangeSet_default_instance_;
}  // namespace zina
namespace protobuf_GroupProtocol_2eproto {
static void InitDefaultsVClock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_VClock_default_instance_;
    new (ptr) ::zina::VClock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::VClock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VClock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVClock}, {}};

static void InitDefaultsLocalVClock() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_LocalVClock_default_instance_;
    new (ptr) ::zina::LocalVClock();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::LocalVClock::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_LocalVClock =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLocalVClock}, {
      &protobuf_GroupProtocol_2eproto::scc_info_VClock.base,}};

static void InitDefaultsMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_Member_default_instance_;
    new (ptr) ::zina::Member();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::Member::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Member =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMember}, {}};

static void InitDefaultsGroupUpdateSetName() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_GroupUpdateSetName_default_instance_;
    new (ptr) ::zina::GroupUpdateSetName();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::GroupUpdateSetName::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateSetName =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGroupUpdateSetName}, {
      &protobuf_GroupProtocol_2eproto::scc_info_VClock.base,}};

static void InitDefaultsGroupUpdateSetAvatar() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_GroupUpdateSetAvatar_default_instance_;
    new (ptr) ::zina::GroupUpdateSetAvatar();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::GroupUpdateSetAvatar::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateSetAvatar =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGroupUpdateSetAvatar}, {
      &protobuf_GroupProtocol_2eproto::scc_info_VClock.base,}};

static void InitDefaultsGroupUpdateSetBurn() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_GroupUpdateSetBurn_default_instance_;
    new (ptr) ::zina::GroupUpdateSetBurn();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::GroupUpdateSetBurn::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateSetBurn =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGroupUpdateSetBurn}, {
      &protobuf_GroupProtocol_2eproto::scc_info_VClock.base,}};

static void InitDefaultsGroupUpdateAddMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_GroupUpdateAddMember_default_instance_;
    new (ptr) ::zina::GroupUpdateAddMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::GroupUpdateAddMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateAddMember =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGroupUpdateAddMember}, {
      &protobuf_GroupProtocol_2eproto::scc_info_Member.base,}};

static void InitDefaultsGroupUpdateRmMember() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_GroupUpdateRmMember_default_instance_;
    new (ptr) ::zina::GroupUpdateRmMember();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::GroupUpdateRmMember::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GroupUpdateRmMember =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGroupUpdateRmMember}, {
      &protobuf_GroupProtocol_2eproto::scc_info_Member.base,}};

static void InitDefaultsGroupBurnMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_GroupBurnMessage_default_instance_;
    new (ptr) ::zina::GroupBurnMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::GroupBurnMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GroupBurnMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGroupBurnMessage}, {
      &protobuf_GroupProtocol_2eproto::scc_info_Member.base,}};

static void InitDefaultsGroupUpdateAck() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_GroupUpdateAck_default_instance_;
    new (ptr) ::zina::GroupUpdateAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::GroupUpdateAck::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GroupUpdateAck =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGroupUpdateAck}, {}};

static void InitDefaultsGroupChangeSet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::zina::_GroupChangeSet_default_instance_;
    new (ptr) ::zina::GroupChangeSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::zina::GroupChangeSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_GroupChangeSet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsGroupChangeSet}, {
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateSetName.base,
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateSetAvatar.base,
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateSetBurn.base,
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateAddMember.base,
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateRmMember.base,
      &protobuf_GroupProtocol_2eproto::scc_info_GroupBurnMessage.base,
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateAck.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_VClock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LocalVClock.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Member.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupUpdateSetName.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupUpdateSetAvatar.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupUpdateSetBurn.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupUpdateAddMember.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupUpdateRmMember.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupBurnMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupUpdateAck.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GroupChangeSet.base);
}

}  // namespace protobuf_GroupProtocol_2eproto
namespace zina {
bool GroupUpdateSetBurn_BurnMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GroupUpdateSetBurn_BurnMode GroupUpdateSetBurn::BURN_NONE;
const GroupUpdateSetBurn_BurnMode GroupUpdateSetBurn::FROM_SEND_RETROACTIVE;
const GroupUpdateSetBurn_BurnMode GroupUpdateSetBurn::BurnMode_MIN;
const GroupUpdateSetBurn_BurnMode GroupUpdateSetBurn::BurnMode_MAX;
const int GroupUpdateSetBurn::BurnMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool GroupUpdateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

bool GroupUpdateResult_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VClock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VClock::kDeviceIdFieldNumber;
const int VClock::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VClock::VClock()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_VClock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.VClock)
}
VClock::VClock(const VClock& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_device_id()) {
    device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:zina.VClock)
}

void VClock::SharedCtor() {
  device_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = GOOGLE_LONGLONG(0);
}

VClock::~VClock() {
  // @@protoc_insertion_point(destructor:zina.VClock)
  SharedDtor();
}

void VClock::SharedDtor() {
  device_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void VClock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VClock& VClock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_VClock.base);
  return *internal_default_instance();
}


void VClock::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.VClock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    device_id_.ClearNonDefaultToEmptyNoArena();
  }
  value_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VClock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.VClock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes device_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_device_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.VClock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.VClock)
  return false;
#undef DO_
}

void VClock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.VClock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes device_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->device_id(), output);
  }

  // optional int64 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.VClock)
}

size_t VClock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.VClock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes device_id = 1;
    if (has_device_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->device_id());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VClock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VClock*>(&from));
}

void VClock::MergeFrom(const VClock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.VClock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_device_id();
      device_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.device_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VClock::CopyFrom(const VClock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.VClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VClock::IsInitialized() const {
  return true;
}

void VClock::Swap(VClock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VClock::InternalSwap(VClock* other) {
  using std::swap;
  device_id_.Swap(&other->device_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string VClock::GetTypeName() const {
  return "zina.VClock";
}


// ===================================================================

void LocalVClock::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalVClock::kVclockFieldNumber;
const int LocalVClock::kUpdateIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalVClock::LocalVClock()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_LocalVClock.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.LocalVClock)
}
LocalVClock::LocalVClock(const LocalVClock& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      vclock_(from.vclock_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_id()) {
    update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
  }
  // @@protoc_insertion_point(copy_constructor:zina.LocalVClock)
}

void LocalVClock::SharedCtor() {
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

LocalVClock::~LocalVClock() {
  // @@protoc_insertion_point(destructor:zina.LocalVClock)
  SharedDtor();
}

void LocalVClock::SharedDtor() {
  update_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LocalVClock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LocalVClock& LocalVClock::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_LocalVClock.base);
  return *internal_default_instance();
}


void LocalVClock::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.LocalVClock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vclock_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    update_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalVClock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.LocalVClock)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .zina.VClock vclock = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vclock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes update_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.LocalVClock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.LocalVClock)
  return false;
#undef DO_
}

void LocalVClock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.LocalVClock)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .zina.VClock vclock = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vclock_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1,
      this->vclock(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bytes update_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->update_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.LocalVClock)
}

size_t LocalVClock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.LocalVClock)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .zina.VClock vclock = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->vclock_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vclock(static_cast<int>(i)));
    }
  }

  // optional bytes update_id = 2;
  if (has_update_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->update_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalVClock::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocalVClock*>(&from));
}

void LocalVClock::MergeFrom(const LocalVClock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.LocalVClock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vclock_.MergeFrom(from.vclock_);
  if (from.has_update_id()) {
    set_has_update_id();
    update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
  }
}

void LocalVClock::CopyFrom(const LocalVClock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.LocalVClock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalVClock::IsInitialized() const {
  return true;
}

void LocalVClock::Swap(LocalVClock* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalVClock::InternalSwap(LocalVClock* other) {
  using std::swap;
  CastToBase(&vclock_)->InternalSwap(CastToBase(&other->vclock_));
  update_id_.Swap(&other->update_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string LocalVClock::GetTypeName() const {
  return "zina.LocalVClock";
}


// ===================================================================

void Member::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Member::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Member::Member()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_Member.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.Member)
}
Member::Member(const Member& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:zina.Member)
}

void Member::SharedCtor() {
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Member::~Member() {
  // @@protoc_insertion_point(destructor:zina.Member)
  SharedDtor();
}

void Member::SharedDtor() {
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Member::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Member& Member::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_Member.base);
  return *internal_default_instance();
}


void Member::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    user_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Member::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.Member)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.Member)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.Member)
  return false;
#undef DO_
}

void Member::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.Member)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string user_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->user_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.Member)
}

size_t Member::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.Member)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // optional string user_id = 1;
  if (has_user_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Member::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Member*>(&from));
}

void Member::MergeFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.Member)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_user_id()) {
    set_has_user_id();
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
}

void Member::CopyFrom(const Member& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.Member)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Member::IsInitialized() const {
  return true;
}

void Member::Swap(Member* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Member::InternalSwap(Member* other) {
  using std::swap;
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string Member::GetTypeName() const {
  return "zina.Member";
}


// ===================================================================

void GroupUpdateSetName::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUpdateSetName::kUpdateIdFieldNumber;
const int GroupUpdateSetName::kVclockFieldNumber;
const int GroupUpdateSetName::kNameFieldNumber;
const int GroupUpdateSetName::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUpdateSetName::GroupUpdateSetName()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateSetName.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.GroupUpdateSetName)
}
GroupUpdateSetName::GroupUpdateSetName(const GroupUpdateSetName& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      vclock_(from.vclock_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_id()) {
    update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:zina.GroupUpdateSetName)
}

void GroupUpdateSetName::SharedCtor() {
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupUpdateSetName::~GroupUpdateSetName() {
  // @@protoc_insertion_point(destructor:zina.GroupUpdateSetName)
  SharedDtor();
}

void GroupUpdateSetName::SharedDtor() {
  update_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupUpdateSetName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUpdateSetName& GroupUpdateSetName::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateSetName.base);
  return *internal_default_instance();
}


void GroupUpdateSetName::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.GroupUpdateSetName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vclock_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      update_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupUpdateSetName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.GroupUpdateSetName)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes update_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zina.VClock vclock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vclock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.GroupUpdateSetName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.GroupUpdateSetName)
  return false;
#undef DO_
}

void GroupUpdateSetName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.GroupUpdateSetName)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes update_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->update_id(), output);
  }

  // repeated .zina.VClock vclock = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vclock_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->vclock(static_cast<int>(i)),
      output);
  }

  // optional string name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional string user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.GroupUpdateSetName)
}

size_t GroupUpdateSetName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.GroupUpdateSetName)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .zina.VClock vclock = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vclock_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vclock(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes update_id = 1;
    if (has_update_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUpdateSetName::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupUpdateSetName*>(&from));
}

void GroupUpdateSetName::MergeFrom(const GroupUpdateSetName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.GroupUpdateSetName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vclock_.MergeFrom(from.vclock_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_update_id();
      update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
}

void GroupUpdateSetName::CopyFrom(const GroupUpdateSetName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.GroupUpdateSetName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUpdateSetName::IsInitialized() const {
  return true;
}

void GroupUpdateSetName::Swap(GroupUpdateSetName* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUpdateSetName::InternalSwap(GroupUpdateSetName* other) {
  using std::swap;
  CastToBase(&vclock_)->InternalSwap(CastToBase(&other->vclock_));
  update_id_.Swap(&other->update_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GroupUpdateSetName::GetTypeName() const {
  return "zina.GroupUpdateSetName";
}


// ===================================================================

void GroupUpdateSetAvatar::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUpdateSetAvatar::kUpdateIdFieldNumber;
const int GroupUpdateSetAvatar::kVclockFieldNumber;
const int GroupUpdateSetAvatar::kAvatarFieldNumber;
const int GroupUpdateSetAvatar::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUpdateSetAvatar::GroupUpdateSetAvatar()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateSetAvatar.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.GroupUpdateSetAvatar)
}
GroupUpdateSetAvatar::GroupUpdateSetAvatar(const GroupUpdateSetAvatar& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      vclock_(from.vclock_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_id()) {
    update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
  }
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_avatar()) {
    avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:zina.GroupUpdateSetAvatar)
}

void GroupUpdateSetAvatar::SharedCtor() {
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupUpdateSetAvatar::~GroupUpdateSetAvatar() {
  // @@protoc_insertion_point(destructor:zina.GroupUpdateSetAvatar)
  SharedDtor();
}

void GroupUpdateSetAvatar::SharedDtor() {
  update_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupUpdateSetAvatar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUpdateSetAvatar& GroupUpdateSetAvatar::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateSetAvatar.base);
  return *internal_default_instance();
}


void GroupUpdateSetAvatar::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.GroupUpdateSetAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vclock_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      update_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      avatar_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      user_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupUpdateSetAvatar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.GroupUpdateSetAvatar)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes update_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zina.VClock vclock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vclock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string avatar = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.GroupUpdateSetAvatar)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.GroupUpdateSetAvatar)
  return false;
#undef DO_
}

void GroupUpdateSetAvatar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.GroupUpdateSetAvatar)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes update_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->update_id(), output);
  }

  // repeated .zina.VClock vclock = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vclock_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->vclock(static_cast<int>(i)),
      output);
  }

  // optional string avatar = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->avatar(), output);
  }

  // optional string user_id = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->user_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.GroupUpdateSetAvatar)
}

size_t GroupUpdateSetAvatar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.GroupUpdateSetAvatar)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .zina.VClock vclock = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vclock_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vclock(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes update_id = 1;
    if (has_update_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_id());
    }

    // optional string avatar = 3;
    if (has_avatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avatar());
    }

    // optional string user_id = 4;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUpdateSetAvatar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupUpdateSetAvatar*>(&from));
}

void GroupUpdateSetAvatar::MergeFrom(const GroupUpdateSetAvatar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.GroupUpdateSetAvatar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vclock_.MergeFrom(from.vclock_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_update_id();
      update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_avatar();
      avatar_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.avatar_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
}

void GroupUpdateSetAvatar::CopyFrom(const GroupUpdateSetAvatar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.GroupUpdateSetAvatar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUpdateSetAvatar::IsInitialized() const {
  return true;
}

void GroupUpdateSetAvatar::Swap(GroupUpdateSetAvatar* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUpdateSetAvatar::InternalSwap(GroupUpdateSetAvatar* other) {
  using std::swap;
  CastToBase(&vclock_)->InternalSwap(CastToBase(&other->vclock_));
  update_id_.Swap(&other->update_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  avatar_.Swap(&other->avatar_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GroupUpdateSetAvatar::GetTypeName() const {
  return "zina.GroupUpdateSetAvatar";
}


// ===================================================================

void GroupUpdateSetBurn::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUpdateSetBurn::kUpdateIdFieldNumber;
const int GroupUpdateSetBurn::kVclockFieldNumber;
const int GroupUpdateSetBurn::kBurnModeFieldNumber;
const int GroupUpdateSetBurn::kBurnTtlSecFieldNumber;
const int GroupUpdateSetBurn::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUpdateSetBurn::GroupUpdateSetBurn()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateSetBurn.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.GroupUpdateSetBurn)
}
GroupUpdateSetBurn::GroupUpdateSetBurn(const GroupUpdateSetBurn& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      vclock_(from.vclock_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_id()) {
    update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  ::memcpy(&burn_ttl_sec_, &from.burn_ttl_sec_,
    static_cast<size_t>(reinterpret_cast<char*>(&burn_mode_) -
    reinterpret_cast<char*>(&burn_ttl_sec_)) + sizeof(burn_mode_));
  // @@protoc_insertion_point(copy_constructor:zina.GroupUpdateSetBurn)
}

void GroupUpdateSetBurn::SharedCtor() {
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&burn_ttl_sec_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&burn_mode_) -
      reinterpret_cast<char*>(&burn_ttl_sec_)) + sizeof(burn_mode_));
}

GroupUpdateSetBurn::~GroupUpdateSetBurn() {
  // @@protoc_insertion_point(destructor:zina.GroupUpdateSetBurn)
  SharedDtor();
}

void GroupUpdateSetBurn::SharedDtor() {
  update_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupUpdateSetBurn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUpdateSetBurn& GroupUpdateSetBurn::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateSetBurn.base);
  return *internal_default_instance();
}


void GroupUpdateSetBurn::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.GroupUpdateSetBurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vclock_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      update_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&burn_ttl_sec_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&burn_mode_) -
        reinterpret_cast<char*>(&burn_ttl_sec_)) + sizeof(burn_mode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupUpdateSetBurn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.GroupUpdateSetBurn)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes update_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zina.VClock vclock = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_vclock()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.GroupUpdateSetBurn.BurnMode burn_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zina::GroupUpdateSetBurn_BurnMode_IsValid(value)) {
            set_burn_mode(static_cast< ::zina::GroupUpdateSetBurn_BurnMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 burn_ttl_sec = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_burn_ttl_sec();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &burn_ttl_sec_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.GroupUpdateSetBurn)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.GroupUpdateSetBurn)
  return false;
#undef DO_
}

void GroupUpdateSetBurn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.GroupUpdateSetBurn)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes update_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->update_id(), output);
  }

  // repeated .zina.VClock vclock = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vclock_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->vclock(static_cast<int>(i)),
      output);
  }

  // optional .zina.GroupUpdateSetBurn.BurnMode burn_mode = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->burn_mode(), output);
  }

  // optional uint64 burn_ttl_sec = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->burn_ttl_sec(), output);
  }

  // optional string user_id = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->user_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.GroupUpdateSetBurn)
}

size_t GroupUpdateSetBurn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.GroupUpdateSetBurn)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .zina.VClock vclock = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->vclock_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vclock(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional bytes update_id = 1;
    if (has_update_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_id());
    }

    // optional string user_id = 5;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

    // optional uint64 burn_ttl_sec = 4;
    if (has_burn_ttl_sec()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->burn_ttl_sec());
    }

    // optional .zina.GroupUpdateSetBurn.BurnMode burn_mode = 3;
    if (has_burn_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->burn_mode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUpdateSetBurn::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupUpdateSetBurn*>(&from));
}

void GroupUpdateSetBurn::MergeFrom(const GroupUpdateSetBurn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.GroupUpdateSetBurn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vclock_.MergeFrom(from.vclock_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_update_id();
      update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      burn_ttl_sec_ = from.burn_ttl_sec_;
    }
    if (cached_has_bits & 0x00000008u) {
      burn_mode_ = from.burn_mode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupUpdateSetBurn::CopyFrom(const GroupUpdateSetBurn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.GroupUpdateSetBurn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUpdateSetBurn::IsInitialized() const {
  return true;
}

void GroupUpdateSetBurn::Swap(GroupUpdateSetBurn* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUpdateSetBurn::InternalSwap(GroupUpdateSetBurn* other) {
  using std::swap;
  CastToBase(&vclock_)->InternalSwap(CastToBase(&other->vclock_));
  update_id_.Swap(&other->update_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(burn_ttl_sec_, other->burn_ttl_sec_);
  swap(burn_mode_, other->burn_mode_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GroupUpdateSetBurn::GetTypeName() const {
  return "zina.GroupUpdateSetBurn";
}


// ===================================================================

void GroupUpdateAddMember::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUpdateAddMember::kUpdateIdFieldNumber;
const int GroupUpdateAddMember::kAddMemberFieldNumber;
const int GroupUpdateAddMember::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUpdateAddMember::GroupUpdateAddMember()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateAddMember.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.GroupUpdateAddMember)
}
GroupUpdateAddMember::GroupUpdateAddMember(const GroupUpdateAddMember& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      addmember_(from.addmember_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_id()) {
    update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:zina.GroupUpdateAddMember)
}

void GroupUpdateAddMember::SharedCtor() {
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupUpdateAddMember::~GroupUpdateAddMember() {
  // @@protoc_insertion_point(destructor:zina.GroupUpdateAddMember)
  SharedDtor();
}

void GroupUpdateAddMember::SharedDtor() {
  update_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupUpdateAddMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUpdateAddMember& GroupUpdateAddMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateAddMember.base);
  return *internal_default_instance();
}


void GroupUpdateAddMember::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.GroupUpdateAddMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  addmember_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      update_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupUpdateAddMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.GroupUpdateAddMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes update_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zina.Member addMember = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_addmember()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.GroupUpdateAddMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.GroupUpdateAddMember)
  return false;
#undef DO_
}

void GroupUpdateAddMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.GroupUpdateAddMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes update_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->update_id(), output);
  }

  // repeated .zina.Member addMember = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->addmember_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->addmember(static_cast<int>(i)),
      output);
  }

  // optional string user_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.GroupUpdateAddMember)
}

size_t GroupUpdateAddMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.GroupUpdateAddMember)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .zina.Member addMember = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->addmember_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->addmember(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes update_id = 1;
    if (has_update_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_id());
    }

    // optional string user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUpdateAddMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupUpdateAddMember*>(&from));
}

void GroupUpdateAddMember::MergeFrom(const GroupUpdateAddMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.GroupUpdateAddMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  addmember_.MergeFrom(from.addmember_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_update_id();
      update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
}

void GroupUpdateAddMember::CopyFrom(const GroupUpdateAddMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.GroupUpdateAddMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUpdateAddMember::IsInitialized() const {
  return true;
}

void GroupUpdateAddMember::Swap(GroupUpdateAddMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUpdateAddMember::InternalSwap(GroupUpdateAddMember* other) {
  using std::swap;
  CastToBase(&addmember_)->InternalSwap(CastToBase(&other->addmember_));
  update_id_.Swap(&other->update_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GroupUpdateAddMember::GetTypeName() const {
  return "zina.GroupUpdateAddMember";
}


// ===================================================================

void GroupUpdateRmMember::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUpdateRmMember::kUpdateIdFieldNumber;
const int GroupUpdateRmMember::kRmMemberFieldNumber;
const int GroupUpdateRmMember::kUserIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUpdateRmMember::GroupUpdateRmMember()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateRmMember.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.GroupUpdateRmMember)
}
GroupUpdateRmMember::GroupUpdateRmMember(const GroupUpdateRmMember& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      rmmember_(from.rmmember_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_id()) {
    update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
  }
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_user_id()) {
    user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
  }
  // @@protoc_insertion_point(copy_constructor:zina.GroupUpdateRmMember)
}

void GroupUpdateRmMember::SharedCtor() {
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GroupUpdateRmMember::~GroupUpdateRmMember() {
  // @@protoc_insertion_point(destructor:zina.GroupUpdateRmMember)
  SharedDtor();
}

void GroupUpdateRmMember::SharedDtor() {
  update_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupUpdateRmMember::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUpdateRmMember& GroupUpdateRmMember::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateRmMember.base);
  return *internal_default_instance();
}


void GroupUpdateRmMember::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.GroupUpdateRmMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rmmember_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      update_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      user_id_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupUpdateRmMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.GroupUpdateRmMember)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes update_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zina.Member rmMember = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_rmmember()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string user_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.GroupUpdateRmMember)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.GroupUpdateRmMember)
  return false;
#undef DO_
}

void GroupUpdateRmMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.GroupUpdateRmMember)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes update_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->update_id(), output);
  }

  // repeated .zina.Member rmMember = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->rmmember_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2,
      this->rmmember(static_cast<int>(i)),
      output);
  }

  // optional string user_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->user_id(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.GroupUpdateRmMember)
}

size_t GroupUpdateRmMember::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.GroupUpdateRmMember)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .zina.Member rmMember = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->rmmember_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->rmmember(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes update_id = 1;
    if (has_update_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_id());
    }

    // optional string user_id = 3;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUpdateRmMember::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupUpdateRmMember*>(&from));
}

void GroupUpdateRmMember::MergeFrom(const GroupUpdateRmMember& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.GroupUpdateRmMember)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rmmember_.MergeFrom(from.rmmember_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_update_id();
      update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_user_id();
      user_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_id_);
    }
  }
}

void GroupUpdateRmMember::CopyFrom(const GroupUpdateRmMember& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.GroupUpdateRmMember)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUpdateRmMember::IsInitialized() const {
  return true;
}

void GroupUpdateRmMember::Swap(GroupUpdateRmMember* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUpdateRmMember::InternalSwap(GroupUpdateRmMember* other) {
  using std::swap;
  CastToBase(&rmmember_)->InternalSwap(CastToBase(&other->rmmember_));
  update_id_.Swap(&other->update_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_id_.Swap(&other->user_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GroupUpdateRmMember::GetTypeName() const {
  return "zina.GroupUpdateRmMember";
}


// ===================================================================

void GroupBurnMessage::InitAsDefaultInstance() {
  ::zina::_GroupBurnMessage_default_instance_._instance.get_mutable()->member_ = const_cast< ::zina::Member*>(
      ::zina::Member::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupBurnMessage::kUpdateIdFieldNumber;
const int GroupBurnMessage::kMsgIdFieldNumber;
const int GroupBurnMessage::kMemberFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupBurnMessage::GroupBurnMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_GroupBurnMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.GroupBurnMessage)
}
GroupBurnMessage::GroupBurnMessage(const GroupBurnMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      msgid_(from.msgid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_id()) {
    update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
  }
  if (from.has_member()) {
    member_ = new ::zina::Member(*from.member_);
  } else {
    member_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zina.GroupBurnMessage)
}

void GroupBurnMessage::SharedCtor() {
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  member_ = NULL;
}

GroupBurnMessage::~GroupBurnMessage() {
  // @@protoc_insertion_point(destructor:zina.GroupBurnMessage)
  SharedDtor();
}

void GroupBurnMessage::SharedDtor() {
  update_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete member_;
}

void GroupBurnMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupBurnMessage& GroupBurnMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_GroupBurnMessage.base);
  return *internal_default_instance();
}


void GroupBurnMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.GroupBurnMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgid_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      update_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(member_ != NULL);
      member_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupBurnMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.GroupBurnMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes update_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string msgId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_msgid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.Member member = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_member()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.GroupBurnMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.GroupBurnMessage)
  return false;
#undef DO_
}

void GroupBurnMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.GroupBurnMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes update_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->update_id(), output);
  }

  // repeated string msgId = 2;
  for (int i = 0, n = this->msgid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msgid(i), output);
  }

  // optional .zina.Member member = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_member(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.GroupBurnMessage)
}

size_t GroupBurnMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.GroupBurnMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated string msgId = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->msgid_size());
  for (int i = 0, n = this->msgid_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->msgid(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes update_id = 1;
    if (has_update_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_id());
    }

    // optional .zina.Member member = 3;
    if (has_member()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *member_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupBurnMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupBurnMessage*>(&from));
}

void GroupBurnMessage::MergeFrom(const GroupBurnMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.GroupBurnMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgid_.MergeFrom(from.msgid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_update_id();
      update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_member()->::zina::Member::MergeFrom(from.member());
    }
  }
}

void GroupBurnMessage::CopyFrom(const GroupBurnMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.GroupBurnMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupBurnMessage::IsInitialized() const {
  return true;
}

void GroupBurnMessage::Swap(GroupBurnMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupBurnMessage::InternalSwap(GroupBurnMessage* other) {
  using std::swap;
  msgid_.InternalSwap(CastToBase(&other->msgid_));
  update_id_.Swap(&other->update_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(member_, other->member_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GroupBurnMessage::GetTypeName() const {
  return "zina.GroupBurnMessage";
}


// ===================================================================

void GroupUpdateAck::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupUpdateAck::kTypeFieldNumber;
const int GroupUpdateAck::kUpdateIdFieldNumber;
const int GroupUpdateAck::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupUpdateAck::GroupUpdateAck()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateAck.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.GroupUpdateAck)
}
GroupUpdateAck::GroupUpdateAck(const GroupUpdateAck& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_update_id()) {
    update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&result_) -
    reinterpret_cast<char*>(&type_)) + sizeof(result_));
  // @@protoc_insertion_point(copy_constructor:zina.GroupUpdateAck)
}

void GroupUpdateAck::SharedCtor() {
  update_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&result_) -
      reinterpret_cast<char*>(&type_)) + sizeof(result_));
}

GroupUpdateAck::~GroupUpdateAck() {
  // @@protoc_insertion_point(destructor:zina.GroupUpdateAck)
  SharedDtor();
}

void GroupUpdateAck::SharedDtor() {
  update_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GroupUpdateAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupUpdateAck& GroupUpdateAck::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_GroupUpdateAck.base);
  return *internal_default_instance();
}


void GroupUpdateAck::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.GroupUpdateAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    update_id_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&result_) -
        reinterpret_cast<char*>(&type_)) + sizeof(result_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupUpdateAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.GroupUpdateAck)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .zina.GroupUpdateType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zina::GroupUpdateType_IsValid(value)) {
            set_type(static_cast< ::zina::GroupUpdateType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes update_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_update_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.GroupUpdateResult result = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::zina::GroupUpdateResult_IsValid(value)) {
            set_result(static_cast< ::zina::GroupUpdateResult >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.GroupUpdateAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.GroupUpdateAck)
  return false;
#undef DO_
}

void GroupUpdateAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.GroupUpdateAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .zina.GroupUpdateType type = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional bytes update_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->update_id(), output);
  }

  // optional .zina.GroupUpdateResult result = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->result(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.GroupUpdateAck)
}

size_t GroupUpdateAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.GroupUpdateAck)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes update_id = 2;
    if (has_update_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->update_id());
    }

    // optional .zina.GroupUpdateType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .zina.GroupUpdateResult result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupUpdateAck::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupUpdateAck*>(&from));
}

void GroupUpdateAck::MergeFrom(const GroupUpdateAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.GroupUpdateAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_update_id();
      update_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.update_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      result_ = from.result_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GroupUpdateAck::CopyFrom(const GroupUpdateAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.GroupUpdateAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupUpdateAck::IsInitialized() const {
  return true;
}

void GroupUpdateAck::Swap(GroupUpdateAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupUpdateAck::InternalSwap(GroupUpdateAck* other) {
  using std::swap;
  update_id_.Swap(&other->update_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(result_, other->result_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GroupUpdateAck::GetTypeName() const {
  return "zina.GroupUpdateAck";
}


// ===================================================================

void GroupChangeSet::InitAsDefaultInstance() {
  ::zina::_GroupChangeSet_default_instance_._instance.get_mutable()->updatename_ = const_cast< ::zina::GroupUpdateSetName*>(
      ::zina::GroupUpdateSetName::internal_default_instance());
  ::zina::_GroupChangeSet_default_instance_._instance.get_mutable()->updateavatar_ = const_cast< ::zina::GroupUpdateSetAvatar*>(
      ::zina::GroupUpdateSetAvatar::internal_default_instance());
  ::zina::_GroupChangeSet_default_instance_._instance.get_mutable()->updateburn_ = const_cast< ::zina::GroupUpdateSetBurn*>(
      ::zina::GroupUpdateSetBurn::internal_default_instance());
  ::zina::_GroupChangeSet_default_instance_._instance.get_mutable()->updateaddmember_ = const_cast< ::zina::GroupUpdateAddMember*>(
      ::zina::GroupUpdateAddMember::internal_default_instance());
  ::zina::_GroupChangeSet_default_instance_._instance.get_mutable()->updatermmember_ = const_cast< ::zina::GroupUpdateRmMember*>(
      ::zina::GroupUpdateRmMember::internal_default_instance());
  ::zina::_GroupChangeSet_default_instance_._instance.get_mutable()->burnmessage_ = const_cast< ::zina::GroupBurnMessage*>(
      ::zina::GroupBurnMessage::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GroupChangeSet::kGroupIdFieldNumber;
const int GroupChangeSet::kUpdateNameFieldNumber;
const int GroupChangeSet::kUpdateAvatarFieldNumber;
const int GroupChangeSet::kUpdateBurnFieldNumber;
const int GroupChangeSet::kUpdateAddMemberFieldNumber;
const int GroupChangeSet::kUpdateRmMemberFieldNumber;
const int GroupChangeSet::kBurnMessageFieldNumber;
const int GroupChangeSet::kAcksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GroupChangeSet::GroupChangeSet()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_GroupProtocol_2eproto::scc_info_GroupChangeSet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:zina.GroupChangeSet)
}
GroupChangeSet::GroupChangeSet(const GroupChangeSet& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      acks_(from.acks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_group_id()) {
    group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
  }
  if (from.has_updatename()) {
    updatename_ = new ::zina::GroupUpdateSetName(*from.updatename_);
  } else {
    updatename_ = NULL;
  }
  if (from.has_updateavatar()) {
    updateavatar_ = new ::zina::GroupUpdateSetAvatar(*from.updateavatar_);
  } else {
    updateavatar_ = NULL;
  }
  if (from.has_updateburn()) {
    updateburn_ = new ::zina::GroupUpdateSetBurn(*from.updateburn_);
  } else {
    updateburn_ = NULL;
  }
  if (from.has_updateaddmember()) {
    updateaddmember_ = new ::zina::GroupUpdateAddMember(*from.updateaddmember_);
  } else {
    updateaddmember_ = NULL;
  }
  if (from.has_updatermmember()) {
    updatermmember_ = new ::zina::GroupUpdateRmMember(*from.updatermmember_);
  } else {
    updatermmember_ = NULL;
  }
  if (from.has_burnmessage()) {
    burnmessage_ = new ::zina::GroupBurnMessage(*from.burnmessage_);
  } else {
    burnmessage_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:zina.GroupChangeSet)
}

void GroupChangeSet::SharedCtor() {
  group_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&updatename_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&burnmessage_) -
      reinterpret_cast<char*>(&updatename_)) + sizeof(burnmessage_));
}

GroupChangeSet::~GroupChangeSet() {
  // @@protoc_insertion_point(destructor:zina.GroupChangeSet)
  SharedDtor();
}

void GroupChangeSet::SharedDtor() {
  group_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete updatename_;
  if (this != internal_default_instance()) delete updateavatar_;
  if (this != internal_default_instance()) delete updateburn_;
  if (this != internal_default_instance()) delete updateaddmember_;
  if (this != internal_default_instance()) delete updatermmember_;
  if (this != internal_default_instance()) delete burnmessage_;
}

void GroupChangeSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GroupChangeSet& GroupChangeSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_GroupProtocol_2eproto::scc_info_GroupChangeSet.base);
  return *internal_default_instance();
}


void GroupChangeSet::Clear() {
// @@protoc_insertion_point(message_clear_start:zina.GroupChangeSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  acks_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      group_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(updatename_ != NULL);
      updatename_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(updateavatar_ != NULL);
      updateavatar_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(updateburn_ != NULL);
      updateburn_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(updateaddmember_ != NULL);
      updateaddmember_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(updatermmember_ != NULL);
      updatermmember_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(burnmessage_ != NULL);
      burnmessage_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GroupChangeSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:zina.GroupChangeSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes group_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_group_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.GroupUpdateSetName updateName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updatename()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.GroupUpdateSetAvatar updateAvatar = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updateavatar()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.GroupUpdateSetBurn updateBurn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updateburn()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.GroupUpdateAddMember updateAddMember = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updateaddmember()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.GroupUpdateRmMember updateRmMember = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_updatermmember()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .zina.GroupUpdateAck acks = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_acks()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .zina.GroupBurnMessage burnMessage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_burnmessage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:zina.GroupChangeSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:zina.GroupChangeSet)
  return false;
#undef DO_
}

void GroupChangeSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:zina.GroupChangeSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bytes group_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->group_id(), output);
  }

  // optional .zina.GroupUpdateSetName updateName = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_updatename(), output);
  }

  // optional .zina.GroupUpdateSetAvatar updateAvatar = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_updateavatar(), output);
  }

  // optional .zina.GroupUpdateSetBurn updateBurn = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->_internal_updateburn(), output);
  }

  // optional .zina.GroupUpdateAddMember updateAddMember = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->_internal_updateaddmember(), output);
  }

  // optional .zina.GroupUpdateRmMember updateRmMember = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->_internal_updatermmember(), output);
  }

  // repeated .zina.GroupUpdateAck acks = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->acks_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7,
      this->acks(static_cast<int>(i)),
      output);
  }

  // optional .zina.GroupBurnMessage burnMessage = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->_internal_burnmessage(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:zina.GroupChangeSet)
}

size_t GroupChangeSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:zina.GroupChangeSet)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // repeated .zina.GroupUpdateAck acks = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->acks_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->acks(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional bytes group_id = 1;
    if (has_group_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->group_id());
    }

    // optional .zina.GroupUpdateSetName updateName = 2;
    if (has_updatename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *updatename_);
    }

    // optional .zina.GroupUpdateSetAvatar updateAvatar = 3;
    if (has_updateavatar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *updateavatar_);
    }

    // optional .zina.GroupUpdateSetBurn updateBurn = 4;
    if (has_updateburn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *updateburn_);
    }

    // optional .zina.GroupUpdateAddMember updateAddMember = 5;
    if (has_updateaddmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *updateaddmember_);
    }

    // optional .zina.GroupUpdateRmMember updateRmMember = 6;
    if (has_updatermmember()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *updatermmember_);
    }

    // optional .zina.GroupBurnMessage burnMessage = 8;
    if (has_burnmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *burnmessage_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GroupChangeSet::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GroupChangeSet*>(&from));
}

void GroupChangeSet::MergeFrom(const GroupChangeSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:zina.GroupChangeSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  acks_.MergeFrom(from.acks_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_group_id();
      group_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_updatename()->::zina::GroupUpdateSetName::MergeFrom(from.updatename());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_updateavatar()->::zina::GroupUpdateSetAvatar::MergeFrom(from.updateavatar());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_updateburn()->::zina::GroupUpdateSetBurn::MergeFrom(from.updateburn());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_updateaddmember()->::zina::GroupUpdateAddMember::MergeFrom(from.updateaddmember());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_updatermmember()->::zina::GroupUpdateRmMember::MergeFrom(from.updatermmember());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_burnmessage()->::zina::GroupBurnMessage::MergeFrom(from.burnmessage());
    }
  }
}

void GroupChangeSet::CopyFrom(const GroupChangeSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:zina.GroupChangeSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupChangeSet::IsInitialized() const {
  return true;
}

void GroupChangeSet::Swap(GroupChangeSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GroupChangeSet::InternalSwap(GroupChangeSet* other) {
  using std::swap;
  CastToBase(&acks_)->InternalSwap(CastToBase(&other->acks_));
  group_id_.Swap(&other->group_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(updatename_, other->updatename_);
  swap(updateavatar_, other->updateavatar_);
  swap(updateburn_, other->updateburn_);
  swap(updateaddmember_, other->updateaddmember_);
  swap(updatermmember_, other->updatermmember_);
  swap(burnmessage_, other->burnmessage_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string GroupChangeSet::GetTypeName() const {
  return "zina.GroupChangeSet";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace zina
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::VClock* Arena::CreateMaybeMessage< ::zina::VClock >(Arena* arena) {
  return Arena::CreateInternal< ::zina::VClock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::LocalVClock* Arena::CreateMaybeMessage< ::zina::LocalVClock >(Arena* arena) {
  return Arena::CreateInternal< ::zina::LocalVClock >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::Member* Arena::CreateMaybeMessage< ::zina::Member >(Arena* arena) {
  return Arena::CreateInternal< ::zina::Member >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::GroupUpdateSetName* Arena::CreateMaybeMessage< ::zina::GroupUpdateSetName >(Arena* arena) {
  return Arena::CreateInternal< ::zina::GroupUpdateSetName >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::GroupUpdateSetAvatar* Arena::CreateMaybeMessage< ::zina::GroupUpdateSetAvatar >(Arena* arena) {
  return Arena::CreateInternal< ::zina::GroupUpdateSetAvatar >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::GroupUpdateSetBurn* Arena::CreateMaybeMessage< ::zina::GroupUpdateSetBurn >(Arena* arena) {
  return Arena::CreateInternal< ::zina::GroupUpdateSetBurn >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::GroupUpdateAddMember* Arena::CreateMaybeMessage< ::zina::GroupUpdateAddMember >(Arena* arena) {
  return Arena::CreateInternal< ::zina::GroupUpdateAddMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::GroupUpdateRmMember* Arena::CreateMaybeMessage< ::zina::GroupUpdateRmMember >(Arena* arena) {
  return Arena::CreateInternal< ::zina::GroupUpdateRmMember >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::GroupBurnMessage* Arena::CreateMaybeMessage< ::zina::GroupBurnMessage >(Arena* arena) {
  return Arena::CreateInternal< ::zina::GroupBurnMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::GroupUpdateAck* Arena::CreateMaybeMessage< ::zina::GroupUpdateAck >(Arena* arena) {
  return Arena::CreateInternal< ::zina::GroupUpdateAck >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::zina::GroupChangeSet* Arena::CreateMaybeMessage< ::zina::GroupChangeSet >(Arena* arena) {
  return Arena::CreateInternal< ::zina::GroupChangeSet >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
